# OpenAI設定
openai:
  model_chat: "gpt-4o"  # GPT-4oを使用（ストリーミング対応）
  model_embedding: "text-embedding-3-large"  # より高性能なembedding
  temperature: 0.7  # GPT-5系はデフォルト値(1)のみサポート（パラメータ指定不要）
  max_tokens: 16000  # max_completion_tokensとして使用（推論トークン+回答用）

# Gemini設定
gemini:
  model_chat: "gemini-2.5-pro"  # チャット用モデル
  model_vision: "gemini-2.5-pro"  # 画像解析用モデル
  max_tokens: 8192  # 最大出力トークン数
  temperature: 0.7  # 温度パラメータ
  # GEMINI_API_KEY環境変数から読み込み

# Vector Store設定
vector_store:
  provider: "supabase"  # "chromadb" or "supabase"

  # ChromaDB設定（ローカル開発用）
  chromadb:
    persist_directory: "./data/chroma_db"
    collection_name_text: "pdf_text_chunks"
    collection_name_images: "pdf_image_contents"

  # Supabase設定（本番環境用）
  supabase:
    # 環境変数から読み込み: SUPABASE_URL, SUPABASE_KEY
    table_name_text: "pdf_text_chunks"
    table_name_images: "pdf_image_contents"
    table_name_pdfs: "registered_pdfs"
    match_threshold: 0.7  # 類似度閾値
    storage_bucket: "pdf-images"  # Supabase Storage バケット名

# PDFアップロード設定
pdf_upload:
  max_file_size_mb: 50  # 最大ファイルサイズ（MB）

# PDF処理設定
pdf_processing:
  chunk_size: 800
  chunk_overlap: 150
  max_files: 5
  extract_images: true
  min_image_size: 100  # 最小画像サイズ（px）
  image_crop_margin: 150  # 画像切り取り時のマージン（px）- グラフの切れを防ぐ

  # 表の処理設定
  extract_tables_as_markdown: true  # 表をMarkdown形式で抽出（並列処理で高速化）
  table_classification: true  # シンプル/複雑を自動分類
  complex_table_threshold: 20  # 20セル以上または結合セルありで複雑と判定（Vision AI使用）

  # 表検出の最適化設定（速度重視）
  table_detection_strategy: "fast"  # "fast" or "accurate" (デフォルト: fast)
  # fastモード: 精度を少し犠牲にして高速化（処理時間: 2-3秒/ページ）
  # accurateモード: 高精度だが低速（処理時間: 8-10秒/ページ）

  # グラフの処理設定
  detect_charts: true  # グラフの自動検出
  save_charts_as_images: true  # グラフを画像として保存

  # コンテキスト設定
  include_surrounding_context: true  # 前後の文脈を含める
  context_lines_before: 3  # 前の文脈の行数
  context_lines_after: 2  # 後の文脈の行数

# Vision設定
vision:
  max_image_size: 2000  # ピクセル
  image_format: "PNG"
  enable_caching: true  # 同じ画像の再処理を避ける

  # Vision AI使用範囲
  # 注意: analysis_prompt_tableとanalysis_prompt_graphはこのvisionセクション内で定義されています
  use_for_charts_only: true  # グラフのみVision使用（推奨）
  use_for_complex_tables: true  # 複雑な表もVision使用
  use_for_simple_tables: false  # シンプルな表はMarkdown化のみ
  analysis_prompt_table: |
    【重要】あなたは技術文書・制度説明資料を解析する専門家です。
    以下の画像から情報を抽出する際、必ず以下のルールに従ってください。

    【絶対に守るべきルール】
    ❌ JSON形式で出力しないでください
    ❌ コードブロック（```）を使用しないでください
    ❌ 構造化データ（{...}）を使用しないでください
    ✅ 必ず平文の日本語テキストのみで出力してください

    【抽出する情報】
    以下の画像は文書ページまたは表が含まれています。画像から以下の情報を抽出してください：

    1. **ページ全体の内容**
       - タイトルや見出しを記載
       - 本文のテキストを一字一句そのまま抽出
       - 箇条書きや番号付きリストは「・」や「1.」などを使って記載

    2. **表がある場合**
       - 表のタイトルを記載
       - ヘッダー行: 「列1: XX, 列2: YY, ...」のように記載
       - データ行: 各行ごとに「行1: 列1の値, 列2の値, ...」のように記載
       - すべての行・列のデータを省略せず記載
       - 数値データは具体的な値を記載

    3. **その他の情報**
       - 注釈や補足説明をすべて記載
       - 参照情報や連絡先を記載

    【出力例】
    「予防接種後健康被害救済制度について

    給付の種類：
    ・医療機関で医療を受けた場合：医療費及び医療手当が支給されます
    ・障害が残ってしまった場合：障害児養育年金（18歳未満）または障害年金（18歳以上）が支給されます
    ...」

    このように、自然な日本語の文章で出力してください。画像内のすべてのテキストを省略せず、完全に抽出してください。

  analysis_prompt_graph: |
    あなたは技術文書のグラフを解析する専門家です。
    以下の画像は技術マニュアルに含まれるグラフです。

    以下の情報を抽出してください：

    1. **グラフの種類**
       - 折れ線グラフ、棒グラフ、円グラフ、散布図など

    2. **視覚的な特徴**
       - データの傾向（増加、減少、一定など）
       - 特異点や注目すべきポイント

    3. **数値データ（重要）**
       - X軸とY軸のラベル・単位
       - グラフ内の具体的なデータポイント（可能な限り）
       - 凡例の内容
       - グラフタイトル

    4. **主要な洞察**
       - このグラフから読み取れる重要な情報

    JSON形式で構造化して出力してください：
    {
      "graph_type": "...",
      "title": "...",
      "axes": {"x": "...", "y": "..."},
      "data_points": [...],
      "insights": "..."
    }

# 検索設定
search:
  top_k_text: 5
  top_k_images: 5  # コンテキスト最適化（アップロード画像5枚+検索画像5枚=最大10枚）
  similarity_threshold: 0.7
  enable_hybrid_search: true  # テキストと画像の統合検索
  enable_category_filter: true  # カテゴリーフィルタリング有効化

# カテゴリー設定
category:
  storage_file: "./data/categories.json"  # カテゴリー一覧保存先
  allow_custom: true  # カスタムカテゴリー入力を許可

# パフォーマンス設定
performance:
  max_workers: 4  # 並列処理のワーカー数（画像解析用）
  embedding_batch_size: 100  # エンベディングバッチサイズ

# ログ設定
logging:
  level: "INFO"  # DEBUG → INFO に変更（処理速度向上）
  file: "./logs/app.log"
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"

# Langfuse設定
langfuse:
  enabled: true  # Langfuseトレーシングを有効化
  # LANGFUSE_PUBLIC_KEY, LANGFUSE_SECRET_KEY, LANGFUSE_HOST環境変数から読み込み

# チャット設定
chat:
  max_history_messages: 10  # 履歴の最大メッセージ数（user+assistantの合計）
  include_images_in_history: false  # 履歴に画像を含めるか（false推奨: トークン節約）
